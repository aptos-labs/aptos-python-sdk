from _typeshed import Incomplete
from behave import parser as parser
from behave.model_core import FileLocation as FileLocation
from behave.textutil import ensure_stream_with_encoder as ensure_stream_with_encoder

class FileNotFoundError(LookupError): ...
class InvalidFileLocationError(LookupError): ...
class InvalidFilenameError(ValueError): ...

class FileLocationParser:
    pattern: Incomplete
    @classmethod
    def parse(cls, text): ...

class FeatureScenarioLocationCollector:
    feature: Incomplete
    filename: Incomplete
    use_all_scenarios: bool
    scenario_lines: Incomplete
    all_scenarios: Incomplete
    selected_scenarios: Incomplete
    def __init__(
        self,
        feature: Incomplete | None = None,
        location: Incomplete | None = None,
        filename: Incomplete | None = None,
    ) -> None: ...
    def clear(self) -> None: ...
    def add_location(self, location) -> None: ...
    @staticmethod
    def select_scenario_line_for(line, scenario_lines): ...
    def discover_selected_scenarios(self, strict: bool = False): ...
    def build_feature(self): ...

class FeatureListParser:
    @staticmethod
    def parse(text, here: Incomplete | None = None): ...
    @classmethod
    def parse_file(cls, filename): ...

class PathManager:
    initial_paths: Incomplete
    paths: Incomplete
    def __init__(self, paths: Incomplete | None = None) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *crap) -> None: ...
    def add(self, path) -> None: ...

def parse_features(feature_files, language: Incomplete | None = None): ...
def collect_feature_locations(paths, strict: bool = True): ...
def exec_file(
    filename, globals_: Incomplete | None = None, locals_: Incomplete | None = None
) -> None: ...
def load_step_modules(step_paths) -> None: ...
def make_undefined_step_snippet(step, language: Incomplete | None = None): ...
def make_undefined_step_snippets(
    undefined_steps, make_snippet: Incomplete | None = None
): ...
def print_undefined_step_snippets(
    undefined_steps, stream: Incomplete | None = None, colored: bool = True
) -> None: ...
def reset_runtime() -> None: ...
