from _typeshed import Incomplete
from behave._types import Unknown as Unknown

def parse_scoped_name(scoped_name): ...
def load_module(module_name): ...

class LazyObject:
    module_name: Incomplete
    object_name: Incomplete
    resolved_object: Incomplete
    def __init__(self, module_name, object_name: Incomplete | None = None) -> None: ...
    def __get__(
        self, obj: Incomplete | None = None, type: Incomplete | None = None
    ): ...
    def __set__(self, obj, value) -> None: ...
    def get(self): ...

class LazyDict(dict):
    def __getitem__(self, key): ...
    def load_all(self, strict: bool = False) -> None: ...
