from _typeshed import Incomplete
from behave.textutil import select_best_encoding as select_best_encoding

class StreamOpener:
    default_encoding: Incomplete
    name: Incomplete
    stream: Incomplete
    encoding: Incomplete
    should_close_stream: Incomplete
    def __init__(
        self,
        filename: Incomplete | None = None,
        stream: Incomplete | None = None,
        encoding: Incomplete | None = None,
    ) -> None: ...
    @staticmethod
    def ensure_dir_exists(directory) -> None: ...
    @classmethod
    def ensure_stream_with_encoder(cls, stream, encoding: Incomplete | None = None): ...
    def open(self): ...
    def close(self): ...

class Formatter:
    name: Incomplete
    description: Incomplete
    stream_opener: Incomplete
    stream: Incomplete
    config: Incomplete
    def __init__(self, stream_opener, config) -> None: ...
    @property
    def stdout_mode(self): ...
    def open(self): ...
    def uri(self, uri) -> None: ...
    def feature(self, feature) -> None: ...
    def background(self, background) -> None: ...
    def scenario(self, scenario) -> None: ...
    def step(self, step) -> None: ...
    def match(self, match) -> None: ...
    def result(self, step) -> None: ...
    def eof(self) -> None: ...
    def close(self) -> None: ...
    def close_stream(self) -> None: ...
