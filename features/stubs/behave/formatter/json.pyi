from _typeshed import Incomplete
from behave.formatter.base import Formatter as Formatter
from behave.model_core import Status as Status

class JSONFormatter(Formatter):
    name: str
    description: str
    dumps_kwargs: Incomplete
    split_text_into_lines: bool
    json_number_types: Incomplete
    json_scalar_types: Incomplete
    stream: Incomplete
    feature_count: int
    current_feature: Incomplete
    current_feature_data: Incomplete
    current_scenario: Incomplete
    def __init__(self, stream_opener, config) -> None: ...
    def reset(self) -> None: ...
    def uri(self, uri) -> None: ...
    def feature(self, feature) -> None: ...
    def background(self, background) -> None: ...
    def scenario(self, scenario) -> None: ...
    @classmethod
    def make_table(cls, table): ...
    def step(self, step) -> None: ...
    def match(self, match) -> None: ...
    def result(self, step) -> None: ...
    def embedding(self, mime_type, data) -> None: ...
    def eof(self) -> None: ...
    def close(self) -> None: ...
    def add_feature_element(self, element): ...
    @property
    def current_feature_element(self): ...
    def update_status_data(self) -> None: ...
    def finish_current_scenario(self) -> None: ...
    def write_json_header(self) -> None: ...
    def write_json_footer(self) -> None: ...
    def write_json_feature(self, feature_data) -> None: ...
    def write_json_feature_separator(self) -> None: ...

class PrettyJSONFormatter(JSONFormatter):
    name: str
    description: str
    dumps_kwargs: Incomplete
