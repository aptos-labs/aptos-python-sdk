from _typeshed import Incomplete
from behave.formatter.base import Formatter as Formatter
from behave.model_core import Status as Status

class ProgressFormatterBase(Formatter):
    dot_status: Incomplete
    show_timings: bool
    stream: Incomplete
    steps: Incomplete
    failures: Incomplete
    current_feature: Incomplete
    current_scenario: Incomplete
    def __init__(self, stream_opener, config) -> None: ...
    def reset(self) -> None: ...
    def feature(self, feature) -> None: ...
    def background(self, background) -> None: ...
    def scenario(self, scenario) -> None: ...
    def step(self, step) -> None: ...
    def result(self, step) -> None: ...
    def eof(self) -> None: ...
    def report_step_progress(self, step) -> None: ...
    def report_scenario_progress(self) -> None: ...
    def report_feature_completed(self) -> None: ...
    def report_scenario_completed(self) -> None: ...
    def report_feature_duration(self) -> None: ...
    def report_scenario_duration(self) -> None: ...
    def report_failures(self) -> None: ...

class ScenarioProgressFormatter(ProgressFormatterBase):
    name: str
    description: str
    def report_scenario_progress(self) -> None: ...
    def report_feature_completed(self) -> None: ...

class StepProgressFormatter(ProgressFormatterBase):
    name: str
    description: str
    def report_step_progress(self, step) -> None: ...
    def report_feature_completed(self) -> None: ...

class ScenarioStepProgressFormatter(StepProgressFormatter):
    name: str
    description: str
    indent_size: int
    scenario_prefix: Incomplete
    current_feature: Incomplete
    def feature(self, feature) -> None: ...
    current_scenario: Incomplete
    def scenario(self, scenario) -> None: ...
    def report_feature_completed(self) -> None: ...
    failures: Incomplete
    def report_scenario_completed(self) -> None: ...
    def report_failures(self) -> None: ...
