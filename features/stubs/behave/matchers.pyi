from _typeshed import Incomplete
from behave._types import ChainedExceptionUtil as ChainedExceptionUtil
from behave._types import ExceptionUtil as ExceptionUtil
from behave.model_core import Argument as Argument
from behave.model_core import FileLocation as FileLocation
from behave.model_core import Replayable as Replayable

class StepParseError(ValueError):
    def __init__(
        self, text: Incomplete | None = None, exc_cause: Incomplete | None = None
    ) -> None: ...

class Match(Replayable):
    type: str
    func: Incomplete
    arguments: Incomplete
    location: Incomplete
    def __init__(self, func, arguments: Incomplete | None = None) -> None: ...
    def __eq__(self, other): ...
    def with_arguments(self, arguments): ...
    def run(self, context) -> None: ...
    @staticmethod
    def make_location(step_function): ...

class NoMatch(Match):
    func: Incomplete
    arguments: Incomplete
    location: Incomplete
    def __init__(self) -> None: ...

class MatchWithError(Match):
    stored_error: Incomplete
    def __init__(self, func, error) -> None: ...
    def run(self, context) -> None: ...

class Matcher:
    schema: str
    func: Incomplete
    pattern: Incomplete
    step_type: Incomplete
    def __init__(self, func, pattern, step_type: Incomplete | None = None) -> None: ...
    @property
    def string(self): ...
    @property
    def location(self): ...
    @property
    def regex_pattern(self): ...
    def describe(self, schema: Incomplete | None = None): ...
    def check_match(self, step) -> None: ...
    def match(self, step): ...

class ParseMatcher(Matcher):
    custom_types: Incomplete
    parser_class: Incomplete
    parser: Incomplete
    def __init__(self, func, pattern, step_type: Incomplete | None = None) -> None: ...
    @property
    def regex_pattern(self): ...
    def check_match(self, step): ...

class CFParseMatcher(ParseMatcher):
    parser_class: Incomplete

def register_type(**kw) -> None: ...

class RegexMatcher(Matcher):
    regex: Incomplete
    def __init__(self, func, pattern, step_type: Incomplete | None = None) -> None: ...
    def check_match(self, step): ...

class SimplifiedRegexMatcher(RegexMatcher):
    pattern: Incomplete
    def __init__(self, func, pattern, step_type: Incomplete | None = None) -> None: ...

class CucumberRegexMatcher(RegexMatcher): ...

matcher_mapping: Incomplete
current_matcher = ParseMatcher

def use_step_matcher(name) -> None: ...
def step_matcher(name) -> None: ...
def get_matcher(func, pattern): ...
