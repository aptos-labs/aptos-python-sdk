from _typeshed import Incomplete
from behave import i18n as i18n
from behave import model as model

DEFAULT_LANGUAGE: str

def parse_file(filename, language: Incomplete | None = None): ...
def parse_feature(
    data, language: Incomplete | None = None, filename: Incomplete | None = None
): ...
def parse_steps(
    text, language: Incomplete | None = None, filename: Incomplete | None = None
): ...
def parse_tags(text): ...

class ParserError(Exception):
    line: Incomplete
    line_text: Incomplete
    filename: Incomplete
    def __init__(
        self,
        message,
        line,
        filename: Incomplete | None = None,
        line_text: Incomplete | None = None,
    ) -> None: ...

class Parser:
    language: Incomplete
    variant: Incomplete
    state: str
    line: int
    last_step: Incomplete
    multiline_start: Incomplete
    multiline_leading: Incomplete
    multiline_terminator: Incomplete
    filename: Incomplete
    feature: Incomplete
    statement: Incomplete
    tags: Incomplete
    lines: Incomplete
    table: Incomplete
    examples: Incomplete
    keywords: Incomplete
    def __init__(
        self, language: Incomplete | None = None, variant: Incomplete | None = None
    ) -> None: ...
    def reset(self) -> None: ...
    def parse(self, data, filename: Incomplete | None = None): ...
    def diagnose_feature_usage_error(self): ...
    def diagnose_background_usage_error(self): ...
    def diagnose_scenario_usage_error(self): ...
    def diagnose_scenario_outline_usage_error(self): ...
    def ask_parse_failure_oracle(self, line): ...
    def action(self, line) -> None: ...
    def action_init(self, line): ...
    def subaction_detect_taggable_statement(self, line): ...
    def action_feature(self, line): ...
    def action_taggable_statement(self, line): ...
    def action_scenario(self, line): ...
    def action_steps(self, line): ...
    def action_multiline(self, line): ...
    def action_table(self, line): ...
    def match_keyword(self, keyword, line): ...
    def parse_tags(self, line): ...
    def parse_step(self, line): ...
    def parse_steps(self, text, filename: Incomplete | None = None): ...
